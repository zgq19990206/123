1. 普通函数中this指的是？ 宋
window

2.call apply bind中this指的是？张
函数的第一个参数

3.apply与call区别用法？信
都是对象this冒充，传参方式不同，apply参数数组形式

4.对象中的this指的是？张
当前对象

5.箭头函数中的this指的是？李
上一级作用域

6.类中的this指的是？胡
类的实例

7.setInterval中指的是？郭
window

8.什么是作用域？孙
变量的可使用范围

9.什么自由变量作用域？永
在当前作用域下没有定义的变量

10.什么是闭包？吴
a，闭包就是作用域的特殊情况（函数作为函数的返回值，函数作为函数的参数）
b  在闭包 查找自由变量是在函数定义的地方像上一级作用域查找

11. 闭包的作用
a。 实现局部变量（封装），避免变量的全局污染
b。被闭包引用变量不会被回收

12.什么是函数柯里化，用什么实现？段
把多个参数的函数，修改为单一参数的函数

13 js作用域   全局  函数  局部 （let）

14 类似数组的对象转为数组
Array.from(arguments) 
Array.prototype.slice.call(arguments)

15 原型链
a. 每个对象的实例都有一个隐式原型__proto__
b. 对象的隐式原型__proto__ 等于 对应类的显式原型prototype
c. 当获取对象的属性或方法时候，会先在自身属性，方法找
   找不到则沿着隐式原型__proto__ 向上查找 
      一直向上至 Object.prototype 
   还找不到返回undefined
 Object.prototype.__proto__ ===null  

16 class的本质是什么？
 class 本质就是function 函数

17 instanceof 
判断对象是否为某个类的实例
instanceof 前面的对象顺着隐式原型__proto__向上查找  如果能找到 instaceof 后面类的显示元素prototype 则返回 true

18 如果判断一个对象为数组
obj instanceof Array ===true

19 jQuery如何实现为new 化操作
 return new jQuery.prototype.init(selector);
jQuery.prototype.init.prototype = jQuery.prototype
(保证this指向一致)

19 jQuery链式写法是如何保证的
每次指向函数 返回this就可以

21 闭包的作用
隐藏变量作用域，避免变量名全局污染
被闭包引用的变量常驻内容，不会被垃圾回收机制删除

 22 异步与同步
 js是单线程语言
异步不会阻塞代码执行
同步会阻塞代码执行

23 异步应用场景
网络请求 ajax 图片加载
定时任务

24 异步主要有两种方式实现
1. 回调函数
2. promise

25 
// 异步应用场景定时
console.log(100);
setTimeout(function(){
    console.log(200);
},1000)
console.log(300);
setTimeout(function(){
    console.log(400);
},0)
console.log(500);
// 100 300  500 400 200

26 手写一个promise 加载图片

27.promise（承诺）优点和特点
1. 异步执行代码
2. 可以避免回调函数地狱（嵌套多层回调函数）

3. reslove 承诺解决，对应 then
4. reject 拒绝，对应 catch

28. 如果识别不同的浏览器？
ua = navigator.userAgent;
谷歌: ua.indexOf("Chrome")!=-1;
IE: ua.indexOf("Trident")!=-1;

29 浏览器地址拆分
http://127.0.0.1:5500/demo13.html?name=mumu&age=18#/home
location.href

location.protocol  	http：
location.host        	127.0.0.1:5500
location.pathname 	/demo13.html
location.search 	?name=mumu&age=18
location.hash	#/home

30 url编码和解码
修改和设置url cookie最好用编码和解码

encodeURI("曾庆林")
decodeURI("%E6%9B%BE%E5%BA%86%E6%9E%97")

31 window.onload与
     document.DOMContentLoaded
区别
onload要等文档，图片，css，js加载完毕才执行
DOMContentLoaded html文档加载完要执行
DOMContentLoaded 要快


32 vue的hash路由原理
获取hash值     location.hash 实现
监听hash变化 window.onhashchange事件
判断hash值来隐藏或显示对应的div视图

33 什么是DOM
浏览器已经初始化好的树形结构

34 propety与 attribute区别？
 property：修改对象属性，不会体现到html结构值
attribute: 修改html属性会改变html结构
 两者都会引起dom重新渲染

35 html元素节点类型 12种
nodeType  1 元素节点
nodeType  2 属性节点
nodeType  3 是文本节点

36 常见的节点关系
parentNode  父节点
parentElement 父元素节点
childNodes 子节点
firstChild 第一个子节点
firstElementChild 第一个元素节点
lastChild 最后一个子节点
lastElementChild 最后一个元素节点
previousSibling 上一个节点
previousElementSibling 上一兄弟节点
nextSibling 下一个节点
nextElementSibling 下一兄弟节点

37 常见获取节点的方式
getElementById                通过id方法获取
getElementsByTagName   通过标签名获取
getElementsByClassName 通过class
getElementsByName         通过名称方式（）

querySelector 通过css选择器（获取一个）
querySelectorAll （获取多个）


38 节点的增删改查
createElement("p");  创建节点
父.append(子)           追加节点到父元素
父.removeChild(子)    删除节点
cloneNode 	  复制节点
replaceChild（new，old）替换节点


39 如何优化节点操作
1. 对DOM查询缓存 
var list  = document.getElementsByTagName("p");

2. 将频繁操作改为一次操作
 一次性插入多个DOM节点 考虑性能？
 var frag = document.createDocumentFragment();


40-事件流有哪些，有哪些特点？
事件冒泡流，事件从最特定的元素触发，向上冒泡到最不特定的元素（document）
事件捕获流，事件从最不精确的对象(document 对象)开始触发，然后到最精确 
现代浏览器默认是冒泡流 


41 如果阻止事件冒泡，与默认事件
e.stopPropagation()  停止事件冒泡
e.preventDefault()    阻止默认事件
href="javascript:void(0)" 阻止a标签默认事件

42 事件代理你用过吗？
当需要每个元素挨个绑定事件，把事件绑定到父元素上，获取到触发的元素e.taraget，
做些判断，拿到触发元素做些操作或者事情 

优点：01 代码简洁，02减少对浏览器内存占用,03不要滥用04动态添加的元素能绑定事件

43 手写通用的事件代理方法

function on(el,type,selector,callback){
            var parent = document.querySelector(el); //获取到父元素          
            parent.addEventListener(type,e=>{
                var subs = parent.querySelectorAll(selector); // 获取到子元素            
                for(let i=0;i<subs.length;i++){
                    if(e.target===subs[i]){
                        // 事件目标等于当前子元素
                        callback(subs[i]);
                        break;
                    }
                }
            })
        }   

        on("body","click","p",elem=>{
            console.log(elem.innerHTML);
        })


43 让动态添加元素绑定事件
   事件代理 
    jquery中用on来绑定，添加子选择器

44 xhr的状态 readState  4代表请求完成
0- (未初始化)还没有调用send()方法
1- (载入)已调用send()方法,正在发送请求
2-(载入完成) send()方法执行完成，已经接收到全部响应内容
3-(交互)正在解析响应内容
4- (*完成)响应内容解析完成,可以在客户端调用 

45 HTTP响应码有哪些
2xx 代表成功  200 GET成功   201 POST请求成功
3xx 代表重定向 303重定向  307临时重定向 304没有修改定向到缓存
4xx 客户端错误  404页面找不到   401请求页面需要授权
5xx 服务器错误    500 服务错误  

46 手写ajax

47 什么是同源策略
ajax请求的时候浏览器要求当前页面，和请求的地址（server端）必须是同源
同源：协议一致， 域名一致，子域名一致，端口一致

48怎样实现跨域？
1. jsonp
2. CORS  服务器设置 响应头允许跨域
（Access-Control-Allow-Origin: *）

有的跨域都需要服务端server配合

49 . jsonp原理
1. script 标签可以绕过同源限制
2. 服务可以返回数据时调用js函数的形式  fun({name:"mumu",age:18})
3. 本地定义对应的方法获取和操作数据

50. 手写jsonp通用方法

 51 v-if 与v-show的区别
v-show是css方式隐藏元素
v-if 是移除dom
当dom操作频繁用 v-show性能更高
一次性显示隐藏元素用v-if

52 computed 与watch
1. computed从现有数据计算除新的数据
2. watch 时时监听数据的变化，
    深度监听 用 deep ，拿不到oval
3. computed数据会缓存，data不变不会重新计算

53 循环
v-for 用来变量对象
key 不能用随机，也不能用index，用业务数据id等唯一标识符，能够很好的优化dom渲染
（key是虚拟dom，进行差别比较重新渲染的重要标识符）

v-for和v-if不要一起用



54 事件
@事件名=响应函数
v-on：事件名=响应函数

事件修饰符：.once 一次  .stop停止冒泡 ，.prevent 阻止默认事件
按键修饰符@keyup.enter .up  .down
・・
在vue中事件是原生事件对象被挂载到当前元素

55 vue组件的生命周期
// 8个生命周期，创建前后，渲染前后，更新前后，销毁前后
    beforeCreate(){},
    created(){},
    beforeMount(){},
    mounted() { },
    beforeUpdate(){},
    updated(){},
    beforeDestroy(){},
    destroyed()
     
   created 创建完完毕 可以获取到this ajax请求
   mounted 渲染完毕 可以操作dom
   destroyed 销毁完毕移除监听，删除定时器

56 父子组件生命周期的顺序
创建 ：父->子
渲染： 子->父

57 组件间数据传递
1. 父传子：props 属性          父通过属性方式传递 子通过props接收
2. 子传父：$emit 事件          子通过事件方式发射事件 父监听事件获取到事件参数
3.  任意组件：自定义事件
新进一个文件bus.js  export defaut new Vue（）；
bus.$emit("事件名"，事件单数)  发送事件
bus.$on("事件名”，e=>{})       监听事件
bus.$off("事件名")                    移除事件
4.  全局任意组件间 用 vuex

58 props类型和默认值定义
 props:{
       title:{type:String,default:"标题"}
   }

59  vuex作用，什么情况下会用vuex
vuex 组件状态管理器，能够实现组件间数据共享，数据异步的自动的更新视图
当数据需要在多个组件间共享，就会用到vuex

60 vuex 模块
state状态   mutation 方法  getter 计算   action异步部分 module模块

61 组件内如何是vuex（通过map映射，$store）
 
mapstate获取vuex state
也可以用 $store.state

mapMutaions 映射vuex 里面的mutation方法
也可以用$store.commit(方法名，参数)

mapGetters    映射  vuex里面的getter方法
也可以用$store.getters

mapAction  映射 vuex里面的action方法
也可以用$store.dispatch(方法名，参数)

62  vuex中异步加载在哪个方法里面，
什么是ajax请求放在action 里面什么时候放在组件内部
vuex 里面action可以异步加载ajax数据
如果异步加载的数据需要在多个组件内使用那么就放在action加载
如果数据只需要在某个组件内容使用则放在组件内部发起ajax

63. 什么场景下使用vuex
当有组件的数据需要公用共享，需要把数据存储在vuex里面
购物车数据，音乐播放数据，用户的信息权限，。。。

65. 路由模式
 mode: 'history' | ‘hash’
history 需要后端配置

66 动态加载路由
 component: () => import(/* webpackChunkName: "about" */ '../views/About.vue')
 component: () => import( '../views/About.vue')

/* webpackChunkName: "about" */ webpack魔法注释，告诉webpack 该文件的命名为 about

67 路由的参数
配置：{path:"/produce/:id"}
使用   $route.params.id

68 $router和$route 区别
$router 全局路由  携带方法   go  push redirect 
$route 当前路由 携带有路由的参数，查询参数 ，地址
 <router-link to> 路由导航
<router-view>路由容器

69 路由守卫
 当然进入，离开，更新路由前做一些操作（鉴权 。。。权限控制，提前加载）
  全局守卫
router.afterEach((to, from) => {}) 每个路由进入后
router.beforeEach((to, from, next) => {}) 进入前
  路由独享 
   beforeEnter: (to, from, next) => {}，
  afterEnter: (to, from, next) => {}
  组件内部
  beforeRouteEnter (to, from, next) {} 进入路由 获取不到组件this
  beforeRouteUpdate (to, from, next) {}
  beforeRouteLeave (to, from, next) {}

70 插槽
传入 插槽内容：  <组件> <h1>组件插槽内容</h1></组件>
组件内部使用      <slot></slot>

具名插槽     <组件> <h1 slot="foot”>组件具名插槽内容</h1></组件>
组件内部使用      <slot name="foot"></slot>

71mixins 
可以通过混合 让多个组件拥有共同的vue逻辑部分（数据，方法等）抽离出来

72 组件缓存（当组件切换的时候并不会销毁存储在内存中）
<keep-alive> <被缓存组件></keep-alive>
include 包含  exclude 排除

72 动态组件
<component :is="current"></component>

72  名称
mvc    model 模型  view视图  ctrol 控制
mvvm   Model-View-ViewModel    
spa       单页面应用  single page web application

74 vue响应式原理
1. vue响应式的原理 核心是 Object.definedProperty 
2.  通过模板编译 创建 watcher 观察者 连接 订阅发布模式和 
    Object.definedProperty  getter 与setter 
3. 初始化getter创建添加订阅者，调用setter 通知所有订阅者 update更新视图

75 什么是vdom（虚拟dom） 用js去模拟dom树形结构

76 用js描述 一段dom
tag 标签
property属性
children 子节点

77 vue中的模板编译
1. webpack 通过 vue-template-compiler 把所有的 *.vue文件生成 render函数
2. render函数生成 虚拟DOM （vdom）

78 render函数 创建一个组件
var MyChild = {
  props:["level"],
  render:function(createElement){
    return createElement(this.level,{class:{"active":true}},"render函数创建的")
  }
}

   <MyChild level="h3"></MyChild>
<h3 class="active">render函数创建的</h3>

79 自定义v-model 
v-model原理就是发送一个 input事件向父组件
获取了一个value的props

props:["mynum"],
model:{
        prop:"mynum",
        // 定义v-model传递过来的属性名 没有s 默认是value
        event:"change"
        // 定义触发的事件名称 默认input
 },
data(){   return {val:this.mynum}   }
 <button @click="val++;$emit('change',val)"> {{val}}  </button>

80 $nextTick
$nextTick 在DOM 渲染后，触发回调  （dom还没渲染，只是更新了数据，就去获取dom值需要$nextTick）

81 虚拟dom的实现原理
1. 本质上Vdom 是javascript对象，对真实dom的一个抽象
2. 状态变更,记新树和旧树的差异 diff
3. 把差异更新到真正的dom上  patch

82 react的生命周期
挂载阶段
constructor 构造函数
componentWillMount（）将要挂载
render（）
componentDidMont（）已经挂载
componentWillUnmount（）将要卸载

更新阶段
componentWillReceiveProps（nextProps）组件将要获取到props
shoudComponentUpdate（nextProps，nextState） 组件是否触发更新  return true 更新 return false不更新
render： 渲染                                                                    
componentWillUpdate（nextProps，nextState）组件将要更新
componentDidUpdate（prevProps，prevState） 组件已经更新

React 16之后有三个生命周期被废弃(但并未删除)
componentWillMount         
componentWillReceiveProps
componentWillUpdate
新增：
getDerivedStateFromProps 
getSnapshotBeforeUpdate(prevProps, prevState)

回答：比较多，有挂载过程，还有更新过程，我常用的有
counstructor 构造函数
render   渲染
componentDidmount 组件已经挂载 这里面ajax请求，定时器
shoudComponentUpdate（nextProps，nextState） 优化组件是否触发更新 
componentDidUpdate 更新后做些操作
componentWillUnmount（）将要卸载 移除监听与定时器

82 react 性能优化
1. shoudComponentUpdate 避免不必要的更新和dom操作
2. 使用key来帮助React识别列表中所有子组件的最小变化

83 setState是异步还是同步
在生命周期和函数里面是异步，在onclick，和setInterval内置事件里面是同步

84. react组件的通信方式
1. 父子通信： props 方式
2. 子父通信：props+回调的方式
3. 兄弟：找到共同的父节点，结合props方式通信
4.  跨层级  Context  
    4.1 Provider,Consumer
    4.2 childContextTypes={}    getChildContext(){}
5. 全局状态  redux 和 react-redux

85. refs是干什么用的
访问render方法创建的DOM节点

86 state和props区别
state 是组件自己管理的数据，控制自己的状态  ；可变
porps是外部传入的数据参数；不可变
多用props 少用state 没有state的组件叫无状态组件

87 createElement 创建一个组件
const element = React.createElement(
“h1”，
  {className:‘active’}，
  ‘hello，react’
)

88，为什么不直接更新state而用setState
直接就给state不会重新渲染组件，setSate修改数据会重新渲染组件

89 什么是JSX
JSX 是javascript XML 扩展 是React 语法糖模式，能在js中编写html模板
1. 执行块，在编译js代码后 优化了
2. 相对安装，编译过程就会发现错误
3. jsx 编写模板更加简单快速

90 react渲染html
<div dangerouslySetInnerHTML={{_html:code}}>

91 严格模式
<React.StrictMode>
    <App />
  </React.StrictMode>,

92 什么是React Context？
context通过组件树提供了一各传递数据的方法 避免在每一层手动传递porps
（实现组件跨层传递数据）

93 当调用setState时，React render 是如何工作的？
1. render 方法被调用，会返回一个新额虚拟dom结构
2. 当执行setState 进入生命周函数 shouldComponetUpdate
3. 如果返回为true则重新渲染，false 保持不变

94   redux 工作流程
核心概念：
Store 保存数据的地方
State 数据状态
Aciton  视图发出动作
Reducer ：Store 收到动作的处理并返回新的state
dispatch 触发 方法




95  react-redux是如何工作
Provider 从外部封装了整个引用 并想connect传递store
connect 负责联系React 和redux
        1. 获取到state
        2. 包装组件
        export default connect( mapStateToProps,mapDispatchToProps )(App)
         mapStateToProps, 把state转换为props
         mapDispatchToProps 把方法转换为props
        
const mapStateToProps = state =>({
  count:state.count+5,
 location:state.location
})








面试官您好，我叫张国强，来自于河南洛阳，毕业于河南大学，我应聘的是web前端开发岗位，之前在成都鹏业软件股份有限公司大概有过2年的前端开发岗位的工作经验，在上家公司，我们主要做手机手机。我今天来这边也是看公司的招聘要求和我的工作技能相符合，所以来面试一下，也非常感谢公司的面试邀请，让我能够有机会展示自己。我的自我介绍大概就是这些，您可以开始提问了。






















 






